// source: mediapipe/framework/tool/calculator_graph_template.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var mediapipe_framework_calculator_pb = require('../../../mediapipe/framework/calculator_pb.js');
goog.object.extend(proto, mediapipe_framework_calculator_pb);
var mediapipe_framework_deps_proto_descriptor_pb = require('../../../mediapipe/framework/deps/proto_descriptor_pb.js');
goog.object.extend(proto, mediapipe_framework_deps_proto_descriptor_pb);
goog.exportSymbol('proto.mediapipe.CalculatorGraphTemplate', null, global);
goog.exportSymbol('proto.mediapipe.TemplateArgument', null, global);
goog.exportSymbol('proto.mediapipe.TemplateArgument.ParamValueCase', null, global);
goog.exportSymbol('proto.mediapipe.TemplateDict', null, global);
goog.exportSymbol('proto.mediapipe.TemplateDict.Parameter', null, global);
goog.exportSymbol('proto.mediapipe.TemplateExpression', null, global);
goog.exportSymbol('proto.mediapipe.TemplateSubgraphOptions', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mediapipe.TemplateExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.TemplateExpression.repeatedFields_, null);
};
goog.inherits(proto.mediapipe.TemplateExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mediapipe.TemplateExpression.displayName = 'proto.mediapipe.TemplateExpression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mediapipe.CalculatorGraphTemplate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.CalculatorGraphTemplate.repeatedFields_, null);
};
goog.inherits(proto.mediapipe.CalculatorGraphTemplate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mediapipe.CalculatorGraphTemplate.displayName = 'proto.mediapipe.CalculatorGraphTemplate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mediapipe.TemplateArgument = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.TemplateArgument.repeatedFields_, proto.mediapipe.TemplateArgument.oneofGroups_);
};
goog.inherits(proto.mediapipe.TemplateArgument, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mediapipe.TemplateArgument.displayName = 'proto.mediapipe.TemplateArgument';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mediapipe.TemplateDict = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.TemplateDict.repeatedFields_, null);
};
goog.inherits(proto.mediapipe.TemplateDict, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mediapipe.TemplateDict.displayName = 'proto.mediapipe.TemplateDict';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mediapipe.TemplateDict.Parameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mediapipe.TemplateDict.Parameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mediapipe.TemplateDict.Parameter.displayName = 'proto.mediapipe.TemplateDict.Parameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mediapipe.TemplateSubgraphOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mediapipe.TemplateSubgraphOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mediapipe.TemplateSubgraphOptions.displayName = 'proto.mediapipe.TemplateSubgraphOptions';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mediapipe.TemplateExpression.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mediapipe.TemplateExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.mediapipe.TemplateExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mediapipe.TemplateExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mediapipe.TemplateExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    param: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    op: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    argList: jspb.Message.toObjectList(msg.getArgList(),
    proto.mediapipe.TemplateExpression.toObject, includeInstance),
    path: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    fieldType: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    fieldValue: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mediapipe.TemplateExpression}
 */
proto.mediapipe.TemplateExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mediapipe.TemplateExpression;
  return proto.mediapipe.TemplateExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mediapipe.TemplateExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mediapipe.TemplateExpression}
 */
proto.mediapipe.TemplateExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParam(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOp(value);
      break;
    case 3:
      var value = new proto.mediapipe.TemplateExpression;
      reader.readMessage(value,proto.mediapipe.TemplateExpression.deserializeBinaryFromReader);
      msg.addArg(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 5:
      var value = /** @type {!proto.mediapipe.FieldDescriptorProto.Type} */ (reader.readEnum());
      msg.setFieldType(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setFieldValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mediapipe.TemplateExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mediapipe.TemplateExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mediapipe.TemplateExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mediapipe.TemplateExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getArgList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.mediapipe.TemplateExpression.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {!proto.mediapipe.FieldDescriptorProto.Type} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string param = 1;
 * @return {string}
 */
proto.mediapipe.TemplateExpression.prototype.getParam = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mediapipe.TemplateExpression} returns this
 */
proto.mediapipe.TemplateExpression.prototype.setParam = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.TemplateExpression} returns this
 */
proto.mediapipe.TemplateExpression.prototype.clearParam = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.TemplateExpression.prototype.hasParam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string op = 2;
 * @return {string}
 */
proto.mediapipe.TemplateExpression.prototype.getOp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mediapipe.TemplateExpression} returns this
 */
proto.mediapipe.TemplateExpression.prototype.setOp = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.TemplateExpression} returns this
 */
proto.mediapipe.TemplateExpression.prototype.clearOp = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.TemplateExpression.prototype.hasOp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated TemplateExpression arg = 3;
 * @return {!Array<!proto.mediapipe.TemplateExpression>}
 */
proto.mediapipe.TemplateExpression.prototype.getArgList = function() {
  return /** @type{!Array<!proto.mediapipe.TemplateExpression>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.TemplateExpression, 3));
};


/**
 * @param {!Array<!proto.mediapipe.TemplateExpression>} value
 * @return {!proto.mediapipe.TemplateExpression} returns this
*/
proto.mediapipe.TemplateExpression.prototype.setArgList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.mediapipe.TemplateExpression=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mediapipe.TemplateExpression}
 */
proto.mediapipe.TemplateExpression.prototype.addArg = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.mediapipe.TemplateExpression, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mediapipe.TemplateExpression} returns this
 */
proto.mediapipe.TemplateExpression.prototype.clearArgList = function() {
  return this.setArgList([]);
};


/**
 * optional string path = 4;
 * @return {string}
 */
proto.mediapipe.TemplateExpression.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.mediapipe.TemplateExpression} returns this
 */
proto.mediapipe.TemplateExpression.prototype.setPath = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.TemplateExpression} returns this
 */
proto.mediapipe.TemplateExpression.prototype.clearPath = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.TemplateExpression.prototype.hasPath = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional FieldDescriptorProto.Type field_type = 5;
 * @return {!proto.mediapipe.FieldDescriptorProto.Type}
 */
proto.mediapipe.TemplateExpression.prototype.getFieldType = function() {
  return /** @type {!proto.mediapipe.FieldDescriptorProto.Type} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.mediapipe.FieldDescriptorProto.Type} value
 * @return {!proto.mediapipe.TemplateExpression} returns this
 */
proto.mediapipe.TemplateExpression.prototype.setFieldType = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.TemplateExpression} returns this
 */
proto.mediapipe.TemplateExpression.prototype.clearFieldType = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.TemplateExpression.prototype.hasFieldType = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string field_value = 7;
 * @return {string}
 */
proto.mediapipe.TemplateExpression.prototype.getFieldValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.mediapipe.TemplateExpression} returns this
 */
proto.mediapipe.TemplateExpression.prototype.setFieldValue = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.TemplateExpression} returns this
 */
proto.mediapipe.TemplateExpression.prototype.clearFieldValue = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.TemplateExpression.prototype.hasFieldValue = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mediapipe.CalculatorGraphTemplate.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mediapipe.CalculatorGraphTemplate.prototype.toObject = function(opt_includeInstance) {
  return proto.mediapipe.CalculatorGraphTemplate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mediapipe.CalculatorGraphTemplate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mediapipe.CalculatorGraphTemplate.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && mediapipe_framework_calculator_pb.CalculatorGraphConfig.toObject(includeInstance, f),
    ruleList: jspb.Message.toObjectList(msg.getRuleList(),
    proto.mediapipe.TemplateExpression.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mediapipe.CalculatorGraphTemplate}
 */
proto.mediapipe.CalculatorGraphTemplate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mediapipe.CalculatorGraphTemplate;
  return proto.mediapipe.CalculatorGraphTemplate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mediapipe.CalculatorGraphTemplate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mediapipe.CalculatorGraphTemplate}
 */
proto.mediapipe.CalculatorGraphTemplate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new mediapipe_framework_calculator_pb.CalculatorGraphConfig;
      reader.readMessage(value,mediapipe_framework_calculator_pb.CalculatorGraphConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 2:
      var value = new proto.mediapipe.TemplateExpression;
      reader.readMessage(value,proto.mediapipe.TemplateExpression.deserializeBinaryFromReader);
      msg.addRule(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mediapipe.CalculatorGraphTemplate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mediapipe.CalculatorGraphTemplate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mediapipe.CalculatorGraphTemplate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mediapipe.CalculatorGraphTemplate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      mediapipe_framework_calculator_pb.CalculatorGraphConfig.serializeBinaryToWriter
    );
  }
  f = message.getRuleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.mediapipe.TemplateExpression.serializeBinaryToWriter
    );
  }
};


/**
 * optional CalculatorGraphConfig config = 1;
 * @return {?proto.mediapipe.CalculatorGraphConfig}
 */
proto.mediapipe.CalculatorGraphTemplate.prototype.getConfig = function() {
  return /** @type{?proto.mediapipe.CalculatorGraphConfig} */ (
    jspb.Message.getWrapperField(this, mediapipe_framework_calculator_pb.CalculatorGraphConfig, 1));
};


/**
 * @param {?proto.mediapipe.CalculatorGraphConfig|undefined} value
 * @return {!proto.mediapipe.CalculatorGraphTemplate} returns this
*/
proto.mediapipe.CalculatorGraphTemplate.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mediapipe.CalculatorGraphTemplate} returns this
 */
proto.mediapipe.CalculatorGraphTemplate.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.CalculatorGraphTemplate.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated TemplateExpression rule = 2;
 * @return {!Array<!proto.mediapipe.TemplateExpression>}
 */
proto.mediapipe.CalculatorGraphTemplate.prototype.getRuleList = function() {
  return /** @type{!Array<!proto.mediapipe.TemplateExpression>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.TemplateExpression, 2));
};


/**
 * @param {!Array<!proto.mediapipe.TemplateExpression>} value
 * @return {!proto.mediapipe.CalculatorGraphTemplate} returns this
*/
proto.mediapipe.CalculatorGraphTemplate.prototype.setRuleList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.mediapipe.TemplateExpression=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mediapipe.TemplateExpression}
 */
proto.mediapipe.CalculatorGraphTemplate.prototype.addRule = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.mediapipe.TemplateExpression, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mediapipe.CalculatorGraphTemplate} returns this
 */
proto.mediapipe.CalculatorGraphTemplate.prototype.clearRuleList = function() {
  return this.setRuleList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mediapipe.TemplateArgument.repeatedFields_ = [4];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.mediapipe.TemplateArgument.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.mediapipe.TemplateArgument.ParamValueCase = {
  PARAM_VALUE_NOT_SET: 0,
  STR: 1,
  NUM: 2,
  DICT: 3
};

/**
 * @return {proto.mediapipe.TemplateArgument.ParamValueCase}
 */
proto.mediapipe.TemplateArgument.prototype.getParamValueCase = function() {
  return /** @type {proto.mediapipe.TemplateArgument.ParamValueCase} */(jspb.Message.computeOneofCase(this, proto.mediapipe.TemplateArgument.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mediapipe.TemplateArgument.prototype.toObject = function(opt_includeInstance) {
  return proto.mediapipe.TemplateArgument.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mediapipe.TemplateArgument} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mediapipe.TemplateArgument.toObject = function(includeInstance, msg) {
  var f, obj = {
    str: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    num: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    dict: (f = msg.getDict()) && proto.mediapipe.TemplateDict.toObject(includeInstance, f),
    elementList: jspb.Message.toObjectList(msg.getElementList(),
    proto.mediapipe.TemplateArgument.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mediapipe.TemplateArgument}
 */
proto.mediapipe.TemplateArgument.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mediapipe.TemplateArgument;
  return proto.mediapipe.TemplateArgument.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mediapipe.TemplateArgument} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mediapipe.TemplateArgument}
 */
proto.mediapipe.TemplateArgument.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStr(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNum(value);
      break;
    case 3:
      var value = new proto.mediapipe.TemplateDict;
      reader.readMessage(value,proto.mediapipe.TemplateDict.deserializeBinaryFromReader);
      msg.setDict(value);
      break;
    case 4:
      var value = new proto.mediapipe.TemplateArgument;
      reader.readMessage(value,proto.mediapipe.TemplateArgument.deserializeBinaryFromReader);
      msg.addElement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mediapipe.TemplateArgument.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mediapipe.TemplateArgument.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mediapipe.TemplateArgument} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mediapipe.TemplateArgument.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getDict();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.mediapipe.TemplateDict.serializeBinaryToWriter
    );
  }
  f = message.getElementList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.mediapipe.TemplateArgument.serializeBinaryToWriter
    );
  }
};


/**
 * optional string str = 1;
 * @return {string}
 */
proto.mediapipe.TemplateArgument.prototype.getStr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mediapipe.TemplateArgument} returns this
 */
proto.mediapipe.TemplateArgument.prototype.setStr = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.mediapipe.TemplateArgument.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.TemplateArgument} returns this
 */
proto.mediapipe.TemplateArgument.prototype.clearStr = function() {
  return jspb.Message.setOneofField(this, 1, proto.mediapipe.TemplateArgument.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.TemplateArgument.prototype.hasStr = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double num = 2;
 * @return {number}
 */
proto.mediapipe.TemplateArgument.prototype.getNum = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mediapipe.TemplateArgument} returns this
 */
proto.mediapipe.TemplateArgument.prototype.setNum = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.mediapipe.TemplateArgument.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.TemplateArgument} returns this
 */
proto.mediapipe.TemplateArgument.prototype.clearNum = function() {
  return jspb.Message.setOneofField(this, 2, proto.mediapipe.TemplateArgument.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.TemplateArgument.prototype.hasNum = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TemplateDict dict = 3;
 * @return {?proto.mediapipe.TemplateDict}
 */
proto.mediapipe.TemplateArgument.prototype.getDict = function() {
  return /** @type{?proto.mediapipe.TemplateDict} */ (
    jspb.Message.getWrapperField(this, proto.mediapipe.TemplateDict, 3));
};


/**
 * @param {?proto.mediapipe.TemplateDict|undefined} value
 * @return {!proto.mediapipe.TemplateArgument} returns this
*/
proto.mediapipe.TemplateArgument.prototype.setDict = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.mediapipe.TemplateArgument.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mediapipe.TemplateArgument} returns this
 */
proto.mediapipe.TemplateArgument.prototype.clearDict = function() {
  return this.setDict(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.TemplateArgument.prototype.hasDict = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated TemplateArgument element = 4;
 * @return {!Array<!proto.mediapipe.TemplateArgument>}
 */
proto.mediapipe.TemplateArgument.prototype.getElementList = function() {
  return /** @type{!Array<!proto.mediapipe.TemplateArgument>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.TemplateArgument, 4));
};


/**
 * @param {!Array<!proto.mediapipe.TemplateArgument>} value
 * @return {!proto.mediapipe.TemplateArgument} returns this
*/
proto.mediapipe.TemplateArgument.prototype.setElementList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.mediapipe.TemplateArgument=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mediapipe.TemplateArgument}
 */
proto.mediapipe.TemplateArgument.prototype.addElement = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.mediapipe.TemplateArgument, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mediapipe.TemplateArgument} returns this
 */
proto.mediapipe.TemplateArgument.prototype.clearElementList = function() {
  return this.setElementList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mediapipe.TemplateDict.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mediapipe.TemplateDict.prototype.toObject = function(opt_includeInstance) {
  return proto.mediapipe.TemplateDict.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mediapipe.TemplateDict} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mediapipe.TemplateDict.toObject = function(includeInstance, msg) {
  var f, obj = {
    argList: jspb.Message.toObjectList(msg.getArgList(),
    proto.mediapipe.TemplateDict.Parameter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mediapipe.TemplateDict}
 */
proto.mediapipe.TemplateDict.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mediapipe.TemplateDict;
  return proto.mediapipe.TemplateDict.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mediapipe.TemplateDict} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mediapipe.TemplateDict}
 */
proto.mediapipe.TemplateDict.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mediapipe.TemplateDict.Parameter;
      reader.readMessage(value,proto.mediapipe.TemplateDict.Parameter.deserializeBinaryFromReader);
      msg.addArg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mediapipe.TemplateDict.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mediapipe.TemplateDict.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mediapipe.TemplateDict} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mediapipe.TemplateDict.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArgList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mediapipe.TemplateDict.Parameter.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mediapipe.TemplateDict.Parameter.prototype.toObject = function(opt_includeInstance) {
  return proto.mediapipe.TemplateDict.Parameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mediapipe.TemplateDict.Parameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mediapipe.TemplateDict.Parameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    value: (f = msg.getValue()) && proto.mediapipe.TemplateArgument.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mediapipe.TemplateDict.Parameter}
 */
proto.mediapipe.TemplateDict.Parameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mediapipe.TemplateDict.Parameter;
  return proto.mediapipe.TemplateDict.Parameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mediapipe.TemplateDict.Parameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mediapipe.TemplateDict.Parameter}
 */
proto.mediapipe.TemplateDict.Parameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.mediapipe.TemplateArgument;
      reader.readMessage(value,proto.mediapipe.TemplateArgument.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mediapipe.TemplateDict.Parameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mediapipe.TemplateDict.Parameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mediapipe.TemplateDict.Parameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mediapipe.TemplateDict.Parameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mediapipe.TemplateArgument.serializeBinaryToWriter
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.mediapipe.TemplateDict.Parameter.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mediapipe.TemplateDict.Parameter} returns this
 */
proto.mediapipe.TemplateDict.Parameter.prototype.setKey = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.TemplateDict.Parameter} returns this
 */
proto.mediapipe.TemplateDict.Parameter.prototype.clearKey = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.TemplateDict.Parameter.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TemplateArgument value = 2;
 * @return {?proto.mediapipe.TemplateArgument}
 */
proto.mediapipe.TemplateDict.Parameter.prototype.getValue = function() {
  return /** @type{?proto.mediapipe.TemplateArgument} */ (
    jspb.Message.getWrapperField(this, proto.mediapipe.TemplateArgument, 2));
};


/**
 * @param {?proto.mediapipe.TemplateArgument|undefined} value
 * @return {!proto.mediapipe.TemplateDict.Parameter} returns this
*/
proto.mediapipe.TemplateDict.Parameter.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mediapipe.TemplateDict.Parameter} returns this
 */
proto.mediapipe.TemplateDict.Parameter.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.TemplateDict.Parameter.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Parameter arg = 1;
 * @return {!Array<!proto.mediapipe.TemplateDict.Parameter>}
 */
proto.mediapipe.TemplateDict.prototype.getArgList = function() {
  return /** @type{!Array<!proto.mediapipe.TemplateDict.Parameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.TemplateDict.Parameter, 1));
};


/**
 * @param {!Array<!proto.mediapipe.TemplateDict.Parameter>} value
 * @return {!proto.mediapipe.TemplateDict} returns this
*/
proto.mediapipe.TemplateDict.prototype.setArgList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mediapipe.TemplateDict.Parameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mediapipe.TemplateDict.Parameter}
 */
proto.mediapipe.TemplateDict.prototype.addArg = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mediapipe.TemplateDict.Parameter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mediapipe.TemplateDict} returns this
 */
proto.mediapipe.TemplateDict.prototype.clearArgList = function() {
  return this.setArgList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mediapipe.TemplateSubgraphOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.mediapipe.TemplateSubgraphOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mediapipe.TemplateSubgraphOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mediapipe.TemplateSubgraphOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    dict: (f = msg.getDict()) && proto.mediapipe.TemplateDict.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mediapipe.TemplateSubgraphOptions}
 */
proto.mediapipe.TemplateSubgraphOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mediapipe.TemplateSubgraphOptions;
  return proto.mediapipe.TemplateSubgraphOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mediapipe.TemplateSubgraphOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mediapipe.TemplateSubgraphOptions}
 */
proto.mediapipe.TemplateSubgraphOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mediapipe.TemplateDict;
      reader.readMessage(value,proto.mediapipe.TemplateDict.deserializeBinaryFromReader);
      msg.setDict(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mediapipe.TemplateSubgraphOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mediapipe.TemplateSubgraphOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mediapipe.TemplateSubgraphOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mediapipe.TemplateSubgraphOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDict();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mediapipe.TemplateDict.serializeBinaryToWriter
    );
  }
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `ext`.
 * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.TemplateSubgraphOptions>}
 */
proto.mediapipe.TemplateSubgraphOptions.ext = new jspb.ExtensionFieldInfo(
    172998261,
    {ext: 0},
    proto.mediapipe.TemplateSubgraphOptions,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.mediapipe.TemplateSubgraphOptions.toObject),
    0);

mediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[172998261] = new jspb.ExtensionFieldBinaryInfo(
    proto.mediapipe.TemplateSubgraphOptions.ext,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.mediapipe.TemplateSubgraphOptions.serializeBinaryToWriter,
    proto.mediapipe.TemplateSubgraphOptions.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
mediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[172998261] = proto.mediapipe.TemplateSubgraphOptions.ext;

/**
 * optional TemplateDict dict = 1;
 * @return {?proto.mediapipe.TemplateDict}
 */
proto.mediapipe.TemplateSubgraphOptions.prototype.getDict = function() {
  return /** @type{?proto.mediapipe.TemplateDict} */ (
    jspb.Message.getWrapperField(this, proto.mediapipe.TemplateDict, 1));
};


/**
 * @param {?proto.mediapipe.TemplateDict|undefined} value
 * @return {!proto.mediapipe.TemplateSubgraphOptions} returns this
*/
proto.mediapipe.TemplateSubgraphOptions.prototype.setDict = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mediapipe.TemplateSubgraphOptions} returns this
 */
proto.mediapipe.TemplateSubgraphOptions.prototype.clearDict = function() {
  return this.setDict(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.TemplateSubgraphOptions.prototype.hasDict = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `ext`.
 * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.TemplateSubgraphOptions>}
 */
proto.mediapipe.TemplateSubgraphOptions.ext = new jspb.ExtensionFieldInfo(
    172998261,
    {ext: 0},
    proto.mediapipe.TemplateSubgraphOptions,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.mediapipe.TemplateSubgraphOptions.toObject),
    0);

mediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[172998261] = new jspb.ExtensionFieldBinaryInfo(
    proto.mediapipe.TemplateSubgraphOptions.ext,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.mediapipe.TemplateSubgraphOptions.serializeBinaryToWriter,
    proto.mediapipe.TemplateSubgraphOptions.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
mediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[172998261] = proto.mediapipe.TemplateSubgraphOptions.ext;

goog.object.extend(exports, proto.mediapipe);
