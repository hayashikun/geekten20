// source: mediapipe/framework/thread_pool_executor.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var mediapipe_framework_mediapipe_options_pb = require('../../mediapipe/framework/mediapipe_options_pb.js');
goog.object.extend(proto, mediapipe_framework_mediapipe_options_pb);
goog.exportSymbol('proto.mediapipe.ThreadPoolExecutorOptions', null, global);
goog.exportSymbol('proto.mediapipe.ThreadPoolExecutorOptions.ProcessorPerformance', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mediapipe.ThreadPoolExecutorOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mediapipe.ThreadPoolExecutorOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mediapipe.ThreadPoolExecutorOptions.displayName = 'proto.mediapipe.ThreadPoolExecutorOptions';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mediapipe.ThreadPoolExecutorOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.mediapipe.ThreadPoolExecutorOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mediapipe.ThreadPoolExecutorOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mediapipe.ThreadPoolExecutorOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    numThreads: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    stackSize: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    nicePriorityLevel: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    requireProcessorPerformance: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    threadNamePrefix: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mediapipe.ThreadPoolExecutorOptions}
 */
proto.mediapipe.ThreadPoolExecutorOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mediapipe.ThreadPoolExecutorOptions;
  return proto.mediapipe.ThreadPoolExecutorOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mediapipe.ThreadPoolExecutorOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mediapipe.ThreadPoolExecutorOptions}
 */
proto.mediapipe.ThreadPoolExecutorOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumThreads(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStackSize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNicePriorityLevel(value);
      break;
    case 4:
      var value = /** @type {!proto.mediapipe.ThreadPoolExecutorOptions.ProcessorPerformance} */ (reader.readEnum());
      msg.setRequireProcessorPerformance(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setThreadNamePrefix(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mediapipe.ThreadPoolExecutorOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mediapipe.ThreadPoolExecutorOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mediapipe.ThreadPoolExecutorOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mediapipe.ThreadPoolExecutorOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {!proto.mediapipe.ThreadPoolExecutorOptions.ProcessorPerformance} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.mediapipe.ThreadPoolExecutorOptions.ProcessorPerformance = {
  NORMAL: 0,
  LOW: 1,
  HIGH: 2
};


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `ext`.
 * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.ThreadPoolExecutorOptions>}
 */
proto.mediapipe.ThreadPoolExecutorOptions.ext = new jspb.ExtensionFieldInfo(
    157116819,
    {ext: 0},
    proto.mediapipe.ThreadPoolExecutorOptions,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.mediapipe.ThreadPoolExecutorOptions.toObject),
    0);

mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.extensionsBinary[157116819] = new jspb.ExtensionFieldBinaryInfo(
    proto.mediapipe.ThreadPoolExecutorOptions.ext,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.mediapipe.ThreadPoolExecutorOptions.serializeBinaryToWriter,
    proto.mediapipe.ThreadPoolExecutorOptions.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.extensions[157116819] = proto.mediapipe.ThreadPoolExecutorOptions.ext;

/**
 * optional int32 num_threads = 1;
 * @return {number}
 */
proto.mediapipe.ThreadPoolExecutorOptions.prototype.getNumThreads = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mediapipe.ThreadPoolExecutorOptions} returns this
 */
proto.mediapipe.ThreadPoolExecutorOptions.prototype.setNumThreads = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.ThreadPoolExecutorOptions} returns this
 */
proto.mediapipe.ThreadPoolExecutorOptions.prototype.clearNumThreads = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.ThreadPoolExecutorOptions.prototype.hasNumThreads = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 stack_size = 2;
 * @return {number}
 */
proto.mediapipe.ThreadPoolExecutorOptions.prototype.getStackSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.mediapipe.ThreadPoolExecutorOptions} returns this
 */
proto.mediapipe.ThreadPoolExecutorOptions.prototype.setStackSize = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.ThreadPoolExecutorOptions} returns this
 */
proto.mediapipe.ThreadPoolExecutorOptions.prototype.clearStackSize = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.ThreadPoolExecutorOptions.prototype.hasStackSize = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 nice_priority_level = 3;
 * @return {number}
 */
proto.mediapipe.ThreadPoolExecutorOptions.prototype.getNicePriorityLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.mediapipe.ThreadPoolExecutorOptions} returns this
 */
proto.mediapipe.ThreadPoolExecutorOptions.prototype.setNicePriorityLevel = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.ThreadPoolExecutorOptions} returns this
 */
proto.mediapipe.ThreadPoolExecutorOptions.prototype.clearNicePriorityLevel = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.ThreadPoolExecutorOptions.prototype.hasNicePriorityLevel = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ProcessorPerformance require_processor_performance = 4;
 * @return {!proto.mediapipe.ThreadPoolExecutorOptions.ProcessorPerformance}
 */
proto.mediapipe.ThreadPoolExecutorOptions.prototype.getRequireProcessorPerformance = function() {
  return /** @type {!proto.mediapipe.ThreadPoolExecutorOptions.ProcessorPerformance} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.mediapipe.ThreadPoolExecutorOptions.ProcessorPerformance} value
 * @return {!proto.mediapipe.ThreadPoolExecutorOptions} returns this
 */
proto.mediapipe.ThreadPoolExecutorOptions.prototype.setRequireProcessorPerformance = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.ThreadPoolExecutorOptions} returns this
 */
proto.mediapipe.ThreadPoolExecutorOptions.prototype.clearRequireProcessorPerformance = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.ThreadPoolExecutorOptions.prototype.hasRequireProcessorPerformance = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string thread_name_prefix = 5;
 * @return {string}
 */
proto.mediapipe.ThreadPoolExecutorOptions.prototype.getThreadNamePrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.mediapipe.ThreadPoolExecutorOptions} returns this
 */
proto.mediapipe.ThreadPoolExecutorOptions.prototype.setThreadNamePrefix = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.ThreadPoolExecutorOptions} returns this
 */
proto.mediapipe.ThreadPoolExecutorOptions.prototype.clearThreadNamePrefix = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.ThreadPoolExecutorOptions.prototype.hasThreadNamePrefix = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `ext`.
 * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.ThreadPoolExecutorOptions>}
 */
proto.mediapipe.ThreadPoolExecutorOptions.ext = new jspb.ExtensionFieldInfo(
    157116819,
    {ext: 0},
    proto.mediapipe.ThreadPoolExecutorOptions,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.mediapipe.ThreadPoolExecutorOptions.toObject),
    0);

mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.extensionsBinary[157116819] = new jspb.ExtensionFieldBinaryInfo(
    proto.mediapipe.ThreadPoolExecutorOptions.ext,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.mediapipe.ThreadPoolExecutorOptions.serializeBinaryToWriter,
    proto.mediapipe.ThreadPoolExecutorOptions.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.extensions[157116819] = proto.mediapipe.ThreadPoolExecutorOptions.ext;

goog.object.extend(exports, proto.mediapipe);
