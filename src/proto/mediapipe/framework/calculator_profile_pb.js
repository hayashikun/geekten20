// source: mediapipe/framework/calculator_profile.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var mediapipe_framework_calculator_pb = require('../../mediapipe/framework/calculator_pb.js');
goog.object.extend(proto, mediapipe_framework_calculator_pb);
goog.exportSymbol('proto.mediapipe.CalculatorProfile', null, global);
goog.exportSymbol('proto.mediapipe.GraphProfile', null, global);
goog.exportSymbol('proto.mediapipe.GraphTrace', null, global);
goog.exportSymbol('proto.mediapipe.GraphTrace.CalculatorTrace', null, global);
goog.exportSymbol('proto.mediapipe.GraphTrace.EventType', null, global);
goog.exportSymbol('proto.mediapipe.GraphTrace.StreamTrace', null, global);
goog.exportSymbol('proto.mediapipe.StreamProfile', null, global);
goog.exportSymbol('proto.mediapipe.TimeHistogram', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mediapipe.TimeHistogram = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.TimeHistogram.repeatedFields_, null);
};
goog.inherits(proto.mediapipe.TimeHistogram, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mediapipe.TimeHistogram.displayName = 'proto.mediapipe.TimeHistogram';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mediapipe.StreamProfile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mediapipe.StreamProfile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mediapipe.StreamProfile.displayName = 'proto.mediapipe.StreamProfile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mediapipe.CalculatorProfile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.CalculatorProfile.repeatedFields_, null);
};
goog.inherits(proto.mediapipe.CalculatorProfile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mediapipe.CalculatorProfile.displayName = 'proto.mediapipe.CalculatorProfile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mediapipe.GraphTrace = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.GraphTrace.repeatedFields_, null);
};
goog.inherits(proto.mediapipe.GraphTrace, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mediapipe.GraphTrace.displayName = 'proto.mediapipe.GraphTrace';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mediapipe.GraphTrace.StreamTrace = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mediapipe.GraphTrace.StreamTrace, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mediapipe.GraphTrace.StreamTrace.displayName = 'proto.mediapipe.GraphTrace.StreamTrace';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mediapipe.GraphTrace.CalculatorTrace = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.GraphTrace.CalculatorTrace.repeatedFields_, null);
};
goog.inherits(proto.mediapipe.GraphTrace.CalculatorTrace, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mediapipe.GraphTrace.CalculatorTrace.displayName = 'proto.mediapipe.GraphTrace.CalculatorTrace';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mediapipe.GraphProfile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.GraphProfile.repeatedFields_, null);
};
goog.inherits(proto.mediapipe.GraphProfile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mediapipe.GraphProfile.displayName = 'proto.mediapipe.GraphProfile';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mediapipe.TimeHistogram.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mediapipe.TimeHistogram.prototype.toObject = function(opt_includeInstance) {
  return proto.mediapipe.TimeHistogram.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mediapipe.TimeHistogram} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mediapipe.TimeHistogram.toObject = function(includeInstance, msg) {
  var f, obj = {
    total: jspb.Message.getFieldWithDefault(msg, 1, 0),
    intervalSizeUsec: jspb.Message.getFieldWithDefault(msg, 2, 1000000),
    numIntervals: jspb.Message.getFieldWithDefault(msg, 3, 1),
    countList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mediapipe.TimeHistogram}
 */
proto.mediapipe.TimeHistogram.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mediapipe.TimeHistogram;
  return proto.mediapipe.TimeHistogram.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mediapipe.TimeHistogram} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mediapipe.TimeHistogram}
 */
proto.mediapipe.TimeHistogram.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotal(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIntervalSizeUsec(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumIntervals(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.addCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mediapipe.TimeHistogram.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mediapipe.TimeHistogram.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mediapipe.TimeHistogram} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mediapipe.TimeHistogram.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCountList();
  if (f.length > 0) {
    writer.writeRepeatedInt64(
      4,
      f
    );
  }
};


/**
 * optional int64 total = 1;
 * @return {number}
 */
proto.mediapipe.TimeHistogram.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mediapipe.TimeHistogram} returns this
 */
proto.mediapipe.TimeHistogram.prototype.setTotal = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.TimeHistogram} returns this
 */
proto.mediapipe.TimeHistogram.prototype.clearTotal = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.TimeHistogram.prototype.hasTotal = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 interval_size_usec = 2;
 * @return {number}
 */
proto.mediapipe.TimeHistogram.prototype.getIntervalSizeUsec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 1000000));
};


/**
 * @param {number} value
 * @return {!proto.mediapipe.TimeHistogram} returns this
 */
proto.mediapipe.TimeHistogram.prototype.setIntervalSizeUsec = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.TimeHistogram} returns this
 */
proto.mediapipe.TimeHistogram.prototype.clearIntervalSizeUsec = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.TimeHistogram.prototype.hasIntervalSizeUsec = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 num_intervals = 3;
 * @return {number}
 */
proto.mediapipe.TimeHistogram.prototype.getNumIntervals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 1));
};


/**
 * @param {number} value
 * @return {!proto.mediapipe.TimeHistogram} returns this
 */
proto.mediapipe.TimeHistogram.prototype.setNumIntervals = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.TimeHistogram} returns this
 */
proto.mediapipe.TimeHistogram.prototype.clearNumIntervals = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.TimeHistogram.prototype.hasNumIntervals = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated int64 count = 4;
 * @return {!Array<number>}
 */
proto.mediapipe.TimeHistogram.prototype.getCountList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.mediapipe.TimeHistogram} returns this
 */
proto.mediapipe.TimeHistogram.prototype.setCountList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.mediapipe.TimeHistogram} returns this
 */
proto.mediapipe.TimeHistogram.prototype.addCount = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mediapipe.TimeHistogram} returns this
 */
proto.mediapipe.TimeHistogram.prototype.clearCountList = function() {
  return this.setCountList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mediapipe.StreamProfile.prototype.toObject = function(opt_includeInstance) {
  return proto.mediapipe.StreamProfile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mediapipe.StreamProfile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mediapipe.StreamProfile.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    backEdge: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    latency: (f = msg.getLatency()) && proto.mediapipe.TimeHistogram.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mediapipe.StreamProfile}
 */
proto.mediapipe.StreamProfile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mediapipe.StreamProfile;
  return proto.mediapipe.StreamProfile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mediapipe.StreamProfile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mediapipe.StreamProfile}
 */
proto.mediapipe.StreamProfile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBackEdge(value);
      break;
    case 3:
      var value = new proto.mediapipe.TimeHistogram;
      reader.readMessage(value,proto.mediapipe.TimeHistogram.deserializeBinaryFromReader);
      msg.setLatency(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mediapipe.StreamProfile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mediapipe.StreamProfile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mediapipe.StreamProfile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mediapipe.StreamProfile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getLatency();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.mediapipe.TimeHistogram.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.mediapipe.StreamProfile.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mediapipe.StreamProfile} returns this
 */
proto.mediapipe.StreamProfile.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.StreamProfile} returns this
 */
proto.mediapipe.StreamProfile.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.StreamProfile.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool back_edge = 2;
 * @return {boolean}
 */
proto.mediapipe.StreamProfile.prototype.getBackEdge = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mediapipe.StreamProfile} returns this
 */
proto.mediapipe.StreamProfile.prototype.setBackEdge = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.StreamProfile} returns this
 */
proto.mediapipe.StreamProfile.prototype.clearBackEdge = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.StreamProfile.prototype.hasBackEdge = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TimeHistogram latency = 3;
 * @return {?proto.mediapipe.TimeHistogram}
 */
proto.mediapipe.StreamProfile.prototype.getLatency = function() {
  return /** @type{?proto.mediapipe.TimeHistogram} */ (
    jspb.Message.getWrapperField(this, proto.mediapipe.TimeHistogram, 3));
};


/**
 * @param {?proto.mediapipe.TimeHistogram|undefined} value
 * @return {!proto.mediapipe.StreamProfile} returns this
*/
proto.mediapipe.StreamProfile.prototype.setLatency = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mediapipe.StreamProfile} returns this
 */
proto.mediapipe.StreamProfile.prototype.clearLatency = function() {
  return this.setLatency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.StreamProfile.prototype.hasLatency = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mediapipe.CalculatorProfile.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mediapipe.CalculatorProfile.prototype.toObject = function(opt_includeInstance) {
  return proto.mediapipe.CalculatorProfile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mediapipe.CalculatorProfile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mediapipe.CalculatorProfile.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    openRuntime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    closeRuntime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    processRuntime: (f = msg.getProcessRuntime()) && proto.mediapipe.TimeHistogram.toObject(includeInstance, f),
    processInputLatency: (f = msg.getProcessInputLatency()) && proto.mediapipe.TimeHistogram.toObject(includeInstance, f),
    processOutputLatency: (f = msg.getProcessOutputLatency()) && proto.mediapipe.TimeHistogram.toObject(includeInstance, f),
    inputStreamProfilesList: jspb.Message.toObjectList(msg.getInputStreamProfilesList(),
    proto.mediapipe.StreamProfile.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mediapipe.CalculatorProfile}
 */
proto.mediapipe.CalculatorProfile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mediapipe.CalculatorProfile;
  return proto.mediapipe.CalculatorProfile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mediapipe.CalculatorProfile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mediapipe.CalculatorProfile}
 */
proto.mediapipe.CalculatorProfile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOpenRuntime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCloseRuntime(value);
      break;
    case 4:
      var value = new proto.mediapipe.TimeHistogram;
      reader.readMessage(value,proto.mediapipe.TimeHistogram.deserializeBinaryFromReader);
      msg.setProcessRuntime(value);
      break;
    case 5:
      var value = new proto.mediapipe.TimeHistogram;
      reader.readMessage(value,proto.mediapipe.TimeHistogram.deserializeBinaryFromReader);
      msg.setProcessInputLatency(value);
      break;
    case 6:
      var value = new proto.mediapipe.TimeHistogram;
      reader.readMessage(value,proto.mediapipe.TimeHistogram.deserializeBinaryFromReader);
      msg.setProcessOutputLatency(value);
      break;
    case 7:
      var value = new proto.mediapipe.StreamProfile;
      reader.readMessage(value,proto.mediapipe.StreamProfile.deserializeBinaryFromReader);
      msg.addInputStreamProfiles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mediapipe.CalculatorProfile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mediapipe.CalculatorProfile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mediapipe.CalculatorProfile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mediapipe.CalculatorProfile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getProcessRuntime();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.mediapipe.TimeHistogram.serializeBinaryToWriter
    );
  }
  f = message.getProcessInputLatency();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.mediapipe.TimeHistogram.serializeBinaryToWriter
    );
  }
  f = message.getProcessOutputLatency();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.mediapipe.TimeHistogram.serializeBinaryToWriter
    );
  }
  f = message.getInputStreamProfilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.mediapipe.StreamProfile.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.mediapipe.CalculatorProfile.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mediapipe.CalculatorProfile} returns this
 */
proto.mediapipe.CalculatorProfile.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.CalculatorProfile} returns this
 */
proto.mediapipe.CalculatorProfile.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.CalculatorProfile.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 open_runtime = 2;
 * @return {number}
 */
proto.mediapipe.CalculatorProfile.prototype.getOpenRuntime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.mediapipe.CalculatorProfile} returns this
 */
proto.mediapipe.CalculatorProfile.prototype.setOpenRuntime = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.CalculatorProfile} returns this
 */
proto.mediapipe.CalculatorProfile.prototype.clearOpenRuntime = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.CalculatorProfile.prototype.hasOpenRuntime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 close_runtime = 3;
 * @return {number}
 */
proto.mediapipe.CalculatorProfile.prototype.getCloseRuntime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.mediapipe.CalculatorProfile} returns this
 */
proto.mediapipe.CalculatorProfile.prototype.setCloseRuntime = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.CalculatorProfile} returns this
 */
proto.mediapipe.CalculatorProfile.prototype.clearCloseRuntime = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.CalculatorProfile.prototype.hasCloseRuntime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TimeHistogram process_runtime = 4;
 * @return {?proto.mediapipe.TimeHistogram}
 */
proto.mediapipe.CalculatorProfile.prototype.getProcessRuntime = function() {
  return /** @type{?proto.mediapipe.TimeHistogram} */ (
    jspb.Message.getWrapperField(this, proto.mediapipe.TimeHistogram, 4));
};


/**
 * @param {?proto.mediapipe.TimeHistogram|undefined} value
 * @return {!proto.mediapipe.CalculatorProfile} returns this
*/
proto.mediapipe.CalculatorProfile.prototype.setProcessRuntime = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mediapipe.CalculatorProfile} returns this
 */
proto.mediapipe.CalculatorProfile.prototype.clearProcessRuntime = function() {
  return this.setProcessRuntime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.CalculatorProfile.prototype.hasProcessRuntime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional TimeHistogram process_input_latency = 5;
 * @return {?proto.mediapipe.TimeHistogram}
 */
proto.mediapipe.CalculatorProfile.prototype.getProcessInputLatency = function() {
  return /** @type{?proto.mediapipe.TimeHistogram} */ (
    jspb.Message.getWrapperField(this, proto.mediapipe.TimeHistogram, 5));
};


/**
 * @param {?proto.mediapipe.TimeHistogram|undefined} value
 * @return {!proto.mediapipe.CalculatorProfile} returns this
*/
proto.mediapipe.CalculatorProfile.prototype.setProcessInputLatency = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mediapipe.CalculatorProfile} returns this
 */
proto.mediapipe.CalculatorProfile.prototype.clearProcessInputLatency = function() {
  return this.setProcessInputLatency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.CalculatorProfile.prototype.hasProcessInputLatency = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional TimeHistogram process_output_latency = 6;
 * @return {?proto.mediapipe.TimeHistogram}
 */
proto.mediapipe.CalculatorProfile.prototype.getProcessOutputLatency = function() {
  return /** @type{?proto.mediapipe.TimeHistogram} */ (
    jspb.Message.getWrapperField(this, proto.mediapipe.TimeHistogram, 6));
};


/**
 * @param {?proto.mediapipe.TimeHistogram|undefined} value
 * @return {!proto.mediapipe.CalculatorProfile} returns this
*/
proto.mediapipe.CalculatorProfile.prototype.setProcessOutputLatency = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mediapipe.CalculatorProfile} returns this
 */
proto.mediapipe.CalculatorProfile.prototype.clearProcessOutputLatency = function() {
  return this.setProcessOutputLatency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.CalculatorProfile.prototype.hasProcessOutputLatency = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated StreamProfile input_stream_profiles = 7;
 * @return {!Array<!proto.mediapipe.StreamProfile>}
 */
proto.mediapipe.CalculatorProfile.prototype.getInputStreamProfilesList = function() {
  return /** @type{!Array<!proto.mediapipe.StreamProfile>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.StreamProfile, 7));
};


/**
 * @param {!Array<!proto.mediapipe.StreamProfile>} value
 * @return {!proto.mediapipe.CalculatorProfile} returns this
*/
proto.mediapipe.CalculatorProfile.prototype.setInputStreamProfilesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.mediapipe.StreamProfile=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mediapipe.StreamProfile}
 */
proto.mediapipe.CalculatorProfile.prototype.addInputStreamProfiles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.mediapipe.StreamProfile, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mediapipe.CalculatorProfile} returns this
 */
proto.mediapipe.CalculatorProfile.prototype.clearInputStreamProfilesList = function() {
  return this.setInputStreamProfilesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mediapipe.GraphTrace.repeatedFields_ = [3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mediapipe.GraphTrace.prototype.toObject = function(opt_includeInstance) {
  return proto.mediapipe.GraphTrace.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mediapipe.GraphTrace} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mediapipe.GraphTrace.toObject = function(includeInstance, msg) {
  var f, obj = {
    baseTime: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    baseTimestamp: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    calculatorNameList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    streamNameList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    calculatorTraceList: jspb.Message.toObjectList(msg.getCalculatorTraceList(),
    proto.mediapipe.GraphTrace.CalculatorTrace.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mediapipe.GraphTrace}
 */
proto.mediapipe.GraphTrace.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mediapipe.GraphTrace;
  return proto.mediapipe.GraphTrace.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mediapipe.GraphTrace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mediapipe.GraphTrace}
 */
proto.mediapipe.GraphTrace.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBaseTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBaseTimestamp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addCalculatorName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addStreamName(value);
      break;
    case 5:
      var value = new proto.mediapipe.GraphTrace.CalculatorTrace;
      reader.readMessage(value,proto.mediapipe.GraphTrace.CalculatorTrace.deserializeBinaryFromReader);
      msg.addCalculatorTrace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mediapipe.GraphTrace.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mediapipe.GraphTrace.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mediapipe.GraphTrace} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mediapipe.GraphTrace.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getCalculatorNameList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getStreamNameList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getCalculatorTraceList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.mediapipe.GraphTrace.CalculatorTrace.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.mediapipe.GraphTrace.EventType = {
  UNKNOWN: 0,
  OPEN: 1,
  PROCESS: 2,
  CLOSE: 3,
  NOT_READY: 4,
  READY_FOR_PROCESS: 5,
  READY_FOR_CLOSE: 6,
  THROTTLED: 7,
  UNTHROTTLED: 8,
  CPU_TASK_USER: 9,
  CPU_TASK_SYSTEM: 10,
  GPU_TASK: 11,
  DSP_TASK: 12,
  TPU_TASK: 13,
  GPU_CALIBRATION: 14,
  PACKET_QUEUED: 15
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mediapipe.GraphTrace.StreamTrace.prototype.toObject = function(opt_includeInstance) {
  return proto.mediapipe.GraphTrace.StreamTrace.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mediapipe.GraphTrace.StreamTrace} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mediapipe.GraphTrace.StreamTrace.toObject = function(includeInstance, msg) {
  var f, obj = {
    startTime: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    finishTime: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    packetTimestamp: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    streamId: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    packetId: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    eventData: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mediapipe.GraphTrace.StreamTrace}
 */
proto.mediapipe.GraphTrace.StreamTrace.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mediapipe.GraphTrace.StreamTrace;
  return proto.mediapipe.GraphTrace.StreamTrace.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mediapipe.GraphTrace.StreamTrace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mediapipe.GraphTrace.StreamTrace}
 */
proto.mediapipe.GraphTrace.StreamTrace.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFinishTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPacketTimestamp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStreamId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPacketId(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEventData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mediapipe.GraphTrace.StreamTrace.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mediapipe.GraphTrace.StreamTrace.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mediapipe.GraphTrace.StreamTrace} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mediapipe.GraphTrace.StreamTrace.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt64(
      6,
      f
    );
  }
};


/**
 * optional int64 start_time = 1;
 * @return {number}
 */
proto.mediapipe.GraphTrace.StreamTrace.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mediapipe.GraphTrace.StreamTrace} returns this
 */
proto.mediapipe.GraphTrace.StreamTrace.prototype.setStartTime = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.GraphTrace.StreamTrace} returns this
 */
proto.mediapipe.GraphTrace.StreamTrace.prototype.clearStartTime = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.GraphTrace.StreamTrace.prototype.hasStartTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 finish_time = 2;
 * @return {number}
 */
proto.mediapipe.GraphTrace.StreamTrace.prototype.getFinishTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.mediapipe.GraphTrace.StreamTrace} returns this
 */
proto.mediapipe.GraphTrace.StreamTrace.prototype.setFinishTime = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.GraphTrace.StreamTrace} returns this
 */
proto.mediapipe.GraphTrace.StreamTrace.prototype.clearFinishTime = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.GraphTrace.StreamTrace.prototype.hasFinishTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 packet_timestamp = 3;
 * @return {number}
 */
proto.mediapipe.GraphTrace.StreamTrace.prototype.getPacketTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.mediapipe.GraphTrace.StreamTrace} returns this
 */
proto.mediapipe.GraphTrace.StreamTrace.prototype.setPacketTimestamp = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.GraphTrace.StreamTrace} returns this
 */
proto.mediapipe.GraphTrace.StreamTrace.prototype.clearPacketTimestamp = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.GraphTrace.StreamTrace.prototype.hasPacketTimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 stream_id = 4;
 * @return {number}
 */
proto.mediapipe.GraphTrace.StreamTrace.prototype.getStreamId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.mediapipe.GraphTrace.StreamTrace} returns this
 */
proto.mediapipe.GraphTrace.StreamTrace.prototype.setStreamId = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.GraphTrace.StreamTrace} returns this
 */
proto.mediapipe.GraphTrace.StreamTrace.prototype.clearStreamId = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.GraphTrace.StreamTrace.prototype.hasStreamId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 packet_id = 5;
 * @return {number}
 */
proto.mediapipe.GraphTrace.StreamTrace.prototype.getPacketId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.mediapipe.GraphTrace.StreamTrace} returns this
 */
proto.mediapipe.GraphTrace.StreamTrace.prototype.setPacketId = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.GraphTrace.StreamTrace} returns this
 */
proto.mediapipe.GraphTrace.StreamTrace.prototype.clearPacketId = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.GraphTrace.StreamTrace.prototype.hasPacketId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int64 event_data = 6;
 * @return {number}
 */
proto.mediapipe.GraphTrace.StreamTrace.prototype.getEventData = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.mediapipe.GraphTrace.StreamTrace} returns this
 */
proto.mediapipe.GraphTrace.StreamTrace.prototype.setEventData = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.GraphTrace.StreamTrace} returns this
 */
proto.mediapipe.GraphTrace.StreamTrace.prototype.clearEventData = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.GraphTrace.StreamTrace.prototype.hasEventData = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mediapipe.GraphTrace.CalculatorTrace.repeatedFields_ = [6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.toObject = function(opt_includeInstance) {
  return proto.mediapipe.GraphTrace.CalculatorTrace.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mediapipe.GraphTrace.CalculatorTrace} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mediapipe.GraphTrace.CalculatorTrace.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    inputTimestamp: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    eventType: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    startTime: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    finishTime: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    inputTraceList: jspb.Message.toObjectList(msg.getInputTraceList(),
    proto.mediapipe.GraphTrace.StreamTrace.toObject, includeInstance),
    outputTraceList: jspb.Message.toObjectList(msg.getOutputTraceList(),
    proto.mediapipe.GraphTrace.StreamTrace.toObject, includeInstance),
    threadId: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mediapipe.GraphTrace.CalculatorTrace}
 */
proto.mediapipe.GraphTrace.CalculatorTrace.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mediapipe.GraphTrace.CalculatorTrace;
  return proto.mediapipe.GraphTrace.CalculatorTrace.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mediapipe.GraphTrace.CalculatorTrace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mediapipe.GraphTrace.CalculatorTrace}
 */
proto.mediapipe.GraphTrace.CalculatorTrace.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNodeId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInputTimestamp(value);
      break;
    case 3:
      var value = /** @type {!proto.mediapipe.GraphTrace.EventType} */ (reader.readEnum());
      msg.setEventType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFinishTime(value);
      break;
    case 6:
      var value = new proto.mediapipe.GraphTrace.StreamTrace;
      reader.readMessage(value,proto.mediapipe.GraphTrace.StreamTrace.deserializeBinaryFromReader);
      msg.addInputTrace(value);
      break;
    case 7:
      var value = new proto.mediapipe.GraphTrace.StreamTrace;
      reader.readMessage(value,proto.mediapipe.GraphTrace.StreamTrace.deserializeBinaryFromReader);
      msg.addOutputTrace(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setThreadId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mediapipe.GraphTrace.CalculatorTrace.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mediapipe.GraphTrace.CalculatorTrace} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mediapipe.GraphTrace.CalculatorTrace.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {!proto.mediapipe.GraphTrace.EventType} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getInputTraceList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.mediapipe.GraphTrace.StreamTrace.serializeBinaryToWriter
    );
  }
  f = message.getOutputTraceList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.mediapipe.GraphTrace.StreamTrace.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * optional int32 node_id = 1;
 * @return {number}
 */
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.getNodeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mediapipe.GraphTrace.CalculatorTrace} returns this
 */
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.setNodeId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.GraphTrace.CalculatorTrace} returns this
 */
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.clearNodeId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.hasNodeId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 input_timestamp = 2;
 * @return {number}
 */
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.getInputTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.mediapipe.GraphTrace.CalculatorTrace} returns this
 */
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.setInputTimestamp = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.GraphTrace.CalculatorTrace} returns this
 */
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.clearInputTimestamp = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.hasInputTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EventType event_type = 3;
 * @return {!proto.mediapipe.GraphTrace.EventType}
 */
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.getEventType = function() {
  return /** @type {!proto.mediapipe.GraphTrace.EventType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.mediapipe.GraphTrace.EventType} value
 * @return {!proto.mediapipe.GraphTrace.CalculatorTrace} returns this
 */
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.setEventType = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.GraphTrace.CalculatorTrace} returns this
 */
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.clearEventType = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.hasEventType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 start_time = 4;
 * @return {number}
 */
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.mediapipe.GraphTrace.CalculatorTrace} returns this
 */
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.setStartTime = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.GraphTrace.CalculatorTrace} returns this
 */
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.clearStartTime = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.hasStartTime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 finish_time = 5;
 * @return {number}
 */
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.getFinishTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.mediapipe.GraphTrace.CalculatorTrace} returns this
 */
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.setFinishTime = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.GraphTrace.CalculatorTrace} returns this
 */
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.clearFinishTime = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.hasFinishTime = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated StreamTrace input_trace = 6;
 * @return {!Array<!proto.mediapipe.GraphTrace.StreamTrace>}
 */
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.getInputTraceList = function() {
  return /** @type{!Array<!proto.mediapipe.GraphTrace.StreamTrace>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.GraphTrace.StreamTrace, 6));
};


/**
 * @param {!Array<!proto.mediapipe.GraphTrace.StreamTrace>} value
 * @return {!proto.mediapipe.GraphTrace.CalculatorTrace} returns this
*/
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.setInputTraceList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.mediapipe.GraphTrace.StreamTrace=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mediapipe.GraphTrace.StreamTrace}
 */
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.addInputTrace = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.mediapipe.GraphTrace.StreamTrace, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mediapipe.GraphTrace.CalculatorTrace} returns this
 */
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.clearInputTraceList = function() {
  return this.setInputTraceList([]);
};


/**
 * repeated StreamTrace output_trace = 7;
 * @return {!Array<!proto.mediapipe.GraphTrace.StreamTrace>}
 */
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.getOutputTraceList = function() {
  return /** @type{!Array<!proto.mediapipe.GraphTrace.StreamTrace>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.GraphTrace.StreamTrace, 7));
};


/**
 * @param {!Array<!proto.mediapipe.GraphTrace.StreamTrace>} value
 * @return {!proto.mediapipe.GraphTrace.CalculatorTrace} returns this
*/
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.setOutputTraceList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.mediapipe.GraphTrace.StreamTrace=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mediapipe.GraphTrace.StreamTrace}
 */
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.addOutputTrace = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.mediapipe.GraphTrace.StreamTrace, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mediapipe.GraphTrace.CalculatorTrace} returns this
 */
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.clearOutputTraceList = function() {
  return this.setOutputTraceList([]);
};


/**
 * optional int32 thread_id = 8;
 * @return {number}
 */
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.getThreadId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.mediapipe.GraphTrace.CalculatorTrace} returns this
 */
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.setThreadId = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.GraphTrace.CalculatorTrace} returns this
 */
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.clearThreadId = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.GraphTrace.CalculatorTrace.prototype.hasThreadId = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int64 base_time = 1;
 * @return {number}
 */
proto.mediapipe.GraphTrace.prototype.getBaseTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mediapipe.GraphTrace} returns this
 */
proto.mediapipe.GraphTrace.prototype.setBaseTime = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.GraphTrace} returns this
 */
proto.mediapipe.GraphTrace.prototype.clearBaseTime = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.GraphTrace.prototype.hasBaseTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 base_timestamp = 2;
 * @return {number}
 */
proto.mediapipe.GraphTrace.prototype.getBaseTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.mediapipe.GraphTrace} returns this
 */
proto.mediapipe.GraphTrace.prototype.setBaseTimestamp = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mediapipe.GraphTrace} returns this
 */
proto.mediapipe.GraphTrace.prototype.clearBaseTimestamp = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.GraphTrace.prototype.hasBaseTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string calculator_name = 3;
 * @return {!Array<string>}
 */
proto.mediapipe.GraphTrace.prototype.getCalculatorNameList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.mediapipe.GraphTrace} returns this
 */
proto.mediapipe.GraphTrace.prototype.setCalculatorNameList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.mediapipe.GraphTrace} returns this
 */
proto.mediapipe.GraphTrace.prototype.addCalculatorName = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mediapipe.GraphTrace} returns this
 */
proto.mediapipe.GraphTrace.prototype.clearCalculatorNameList = function() {
  return this.setCalculatorNameList([]);
};


/**
 * repeated string stream_name = 4;
 * @return {!Array<string>}
 */
proto.mediapipe.GraphTrace.prototype.getStreamNameList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.mediapipe.GraphTrace} returns this
 */
proto.mediapipe.GraphTrace.prototype.setStreamNameList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.mediapipe.GraphTrace} returns this
 */
proto.mediapipe.GraphTrace.prototype.addStreamName = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mediapipe.GraphTrace} returns this
 */
proto.mediapipe.GraphTrace.prototype.clearStreamNameList = function() {
  return this.setStreamNameList([]);
};


/**
 * repeated CalculatorTrace calculator_trace = 5;
 * @return {!Array<!proto.mediapipe.GraphTrace.CalculatorTrace>}
 */
proto.mediapipe.GraphTrace.prototype.getCalculatorTraceList = function() {
  return /** @type{!Array<!proto.mediapipe.GraphTrace.CalculatorTrace>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.GraphTrace.CalculatorTrace, 5));
};


/**
 * @param {!Array<!proto.mediapipe.GraphTrace.CalculatorTrace>} value
 * @return {!proto.mediapipe.GraphTrace} returns this
*/
proto.mediapipe.GraphTrace.prototype.setCalculatorTraceList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.mediapipe.GraphTrace.CalculatorTrace=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mediapipe.GraphTrace.CalculatorTrace}
 */
proto.mediapipe.GraphTrace.prototype.addCalculatorTrace = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.mediapipe.GraphTrace.CalculatorTrace, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mediapipe.GraphTrace} returns this
 */
proto.mediapipe.GraphTrace.prototype.clearCalculatorTraceList = function() {
  return this.setCalculatorTraceList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mediapipe.GraphProfile.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mediapipe.GraphProfile.prototype.toObject = function(opt_includeInstance) {
  return proto.mediapipe.GraphProfile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mediapipe.GraphProfile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mediapipe.GraphProfile.toObject = function(includeInstance, msg) {
  var f, obj = {
    graphTraceList: jspb.Message.toObjectList(msg.getGraphTraceList(),
    proto.mediapipe.GraphTrace.toObject, includeInstance),
    calculatorProfilesList: jspb.Message.toObjectList(msg.getCalculatorProfilesList(),
    proto.mediapipe.CalculatorProfile.toObject, includeInstance),
    config: (f = msg.getConfig()) && mediapipe_framework_calculator_pb.CalculatorGraphConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mediapipe.GraphProfile}
 */
proto.mediapipe.GraphProfile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mediapipe.GraphProfile;
  return proto.mediapipe.GraphProfile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mediapipe.GraphProfile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mediapipe.GraphProfile}
 */
proto.mediapipe.GraphProfile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mediapipe.GraphTrace;
      reader.readMessage(value,proto.mediapipe.GraphTrace.deserializeBinaryFromReader);
      msg.addGraphTrace(value);
      break;
    case 2:
      var value = new proto.mediapipe.CalculatorProfile;
      reader.readMessage(value,proto.mediapipe.CalculatorProfile.deserializeBinaryFromReader);
      msg.addCalculatorProfiles(value);
      break;
    case 3:
      var value = new mediapipe_framework_calculator_pb.CalculatorGraphConfig;
      reader.readMessage(value,mediapipe_framework_calculator_pb.CalculatorGraphConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mediapipe.GraphProfile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mediapipe.GraphProfile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mediapipe.GraphProfile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mediapipe.GraphProfile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGraphTraceList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mediapipe.GraphTrace.serializeBinaryToWriter
    );
  }
  f = message.getCalculatorProfilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.mediapipe.CalculatorProfile.serializeBinaryToWriter
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      mediapipe_framework_calculator_pb.CalculatorGraphConfig.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GraphTrace graph_trace = 1;
 * @return {!Array<!proto.mediapipe.GraphTrace>}
 */
proto.mediapipe.GraphProfile.prototype.getGraphTraceList = function() {
  return /** @type{!Array<!proto.mediapipe.GraphTrace>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.GraphTrace, 1));
};


/**
 * @param {!Array<!proto.mediapipe.GraphTrace>} value
 * @return {!proto.mediapipe.GraphProfile} returns this
*/
proto.mediapipe.GraphProfile.prototype.setGraphTraceList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mediapipe.GraphTrace=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mediapipe.GraphTrace}
 */
proto.mediapipe.GraphProfile.prototype.addGraphTrace = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mediapipe.GraphTrace, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mediapipe.GraphProfile} returns this
 */
proto.mediapipe.GraphProfile.prototype.clearGraphTraceList = function() {
  return this.setGraphTraceList([]);
};


/**
 * repeated CalculatorProfile calculator_profiles = 2;
 * @return {!Array<!proto.mediapipe.CalculatorProfile>}
 */
proto.mediapipe.GraphProfile.prototype.getCalculatorProfilesList = function() {
  return /** @type{!Array<!proto.mediapipe.CalculatorProfile>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.CalculatorProfile, 2));
};


/**
 * @param {!Array<!proto.mediapipe.CalculatorProfile>} value
 * @return {!proto.mediapipe.GraphProfile} returns this
*/
proto.mediapipe.GraphProfile.prototype.setCalculatorProfilesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.mediapipe.CalculatorProfile=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mediapipe.CalculatorProfile}
 */
proto.mediapipe.GraphProfile.prototype.addCalculatorProfiles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.mediapipe.CalculatorProfile, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mediapipe.GraphProfile} returns this
 */
proto.mediapipe.GraphProfile.prototype.clearCalculatorProfilesList = function() {
  return this.setCalculatorProfilesList([]);
};


/**
 * optional CalculatorGraphConfig config = 3;
 * @return {?proto.mediapipe.CalculatorGraphConfig}
 */
proto.mediapipe.GraphProfile.prototype.getConfig = function() {
  return /** @type{?proto.mediapipe.CalculatorGraphConfig} */ (
    jspb.Message.getWrapperField(this, mediapipe_framework_calculator_pb.CalculatorGraphConfig, 3));
};


/**
 * @param {?proto.mediapipe.CalculatorGraphConfig|undefined} value
 * @return {!proto.mediapipe.GraphProfile} returns this
*/
proto.mediapipe.GraphProfile.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mediapipe.GraphProfile} returns this
 */
proto.mediapipe.GraphProfile.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mediapipe.GraphProfile.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.mediapipe);
